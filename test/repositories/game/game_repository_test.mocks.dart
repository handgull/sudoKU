// Mocks generated by Mockito 5.4.5 from annotations
// in sudoku/test/repositories/game/game_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:pine/pine.dart' as _i4;
import 'package:sudoku/models/sudoku_cell/sudoku_cell.dart' as _i2;
import 'package:sudoku/models/sudoku_data/sudoku_data.dart' as _i5;
import 'package:sudoku/repositories/mappers/sudoku_cell_mapper.dart' as _i7;
import 'package:sudoku/repositories/mappers/sudoku_data_mapper.dart' as _i8;
import 'package:sudoku/services/game_service.dart' as _i9;
import 'package:sudoku/services/network/jto/sudoku_cell/sudoku_cell_jto.dart'
    as _i3;
import 'package:sudoku/services/network/jto/sudoku_data/sudoku_data_jto.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSudokuCell_0 extends _i1.SmartFake implements _i2.SudokuCell {
  _FakeSudokuCell_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSudokuCellJTO_1 extends _i1.SmartFake implements _i3.SudokuCellJTO {
  _FakeSudokuCellJTO_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDTOMapper_2<Source extends _i4.DTO, Model> extends _i1.SmartFake
    implements _i4.DTOMapper<Source, Model> {
  _FakeDTOMapper_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSudokuData_3 extends _i1.SmartFake implements _i5.SudokuData {
  _FakeSudokuData_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSudokuDataJTO_4 extends _i1.SmartFake implements _i6.SudokuDataJTO {
  _FakeSudokuDataJTO_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SudokuCellMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSudokuCellMapper extends _i1.Mock implements _i7.SudokuCellMapper {
  MockSudokuCellMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SudokuCell fromDTO(_i3.SudokuCellJTO? dto) =>
      (super.noSuchMethod(
            Invocation.method(#fromDTO, [dto]),
            returnValue: _FakeSudokuCell_0(
              this,
              Invocation.method(#fromDTO, [dto]),
            ),
          )
          as _i2.SudokuCell);

  @override
  _i3.SudokuCellJTO toDTO(_i2.SudokuCell? model) =>
      (super.noSuchMethod(
            Invocation.method(#toDTO, [model]),
            returnValue: _FakeSudokuCellJTO_1(
              this,
              Invocation.method(#toDTO, [model]),
            ),
          )
          as _i3.SudokuCellJTO);
}

/// A class which mocks [SudokuDataMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSudokuDataMapper extends _i1.Mock implements _i8.SudokuDataMapper {
  MockSudokuDataMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DTOMapper<_i3.SudokuCellJTO, _i2.SudokuCell> get sudokuCellMapper =>
      (super.noSuchMethod(
            Invocation.getter(#sudokuCellMapper),
            returnValue: _FakeDTOMapper_2<_i3.SudokuCellJTO, _i2.SudokuCell>(
              this,
              Invocation.getter(#sudokuCellMapper),
            ),
          )
          as _i4.DTOMapper<_i3.SudokuCellJTO, _i2.SudokuCell>);

  @override
  _i5.SudokuData fromDTO(_i6.SudokuDataJTO? dto) =>
      (super.noSuchMethod(
            Invocation.method(#fromDTO, [dto]),
            returnValue: _FakeSudokuData_3(
              this,
              Invocation.method(#fromDTO, [dto]),
            ),
          )
          as _i5.SudokuData);

  @override
  _i6.SudokuDataJTO toDTO(_i5.SudokuData? model) =>
      (super.noSuchMethod(
            Invocation.method(#toDTO, [model]),
            returnValue: _FakeSudokuDataJTO_4(
              this,
              Invocation.method(#toDTO, [model]),
            ),
          )
          as _i6.SudokuDataJTO);
}

/// A class which mocks [GameService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameService extends _i1.Mock implements _i9.GameService {
  MockGameService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.SudokuDataJTO generate(int? emptySquares) =>
      (super.noSuchMethod(
            Invocation.method(#generate, [emptySquares]),
            returnValue: _FakeSudokuDataJTO_4(
              this,
              Invocation.method(#generate, [emptySquares]),
            ),
          )
          as _i6.SudokuDataJTO);

  @override
  bool checkMove(
    int? quadrant,
    int? index,
    int? value,
    List<List<_i3.SudokuCellJTO>>? board,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#checkMove, [quadrant, index, value, board]),
            returnValue: false,
          )
          as bool);

  @override
  List<List<_i3.SudokuCellJTO>> move(
    int? quadrant,
    int? index,
    _i3.SudokuCellJTO? cellData,
    List<List<_i3.SudokuCellJTO>>? board,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#move, [quadrant, index, cellData, board]),
            returnValue: <List<_i3.SudokuCellJTO>>[],
          )
          as List<List<_i3.SudokuCellJTO>>);

  @override
  bool checkCompleted(List<List<_i3.SudokuCellJTO>>? board) =>
      (super.noSuchMethod(
            Invocation.method(#checkCompleted, [board]),
            returnValue: false,
          )
          as bool);

  @override
  bool checkSolved(_i6.SudokuDataJTO? data) =>
      (super.noSuchMethod(
            Invocation.method(#checkSolved, [data]),
            returnValue: false,
          )
          as bool);
}
