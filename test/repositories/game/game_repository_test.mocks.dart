// Mocks generated by Mockito 5.4.5 from annotations
// in sudoku/test/repositories/game/game_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:sudoku/models/sudoku_data/sudoku_data.dart' as _i2;
import 'package:sudoku/repositories/mappers/sudoku_data.dart' as _i4;
import 'package:sudoku/services/game_service.dart' as _i5;
import 'package:sudoku/services/network/jto/sudoku_data/sudoku_data_jto.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSudokuData_0 extends _i1.SmartFake implements _i2.SudokuData {
  _FakeSudokuData_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSudokuDataJTO_1 extends _i1.SmartFake implements _i3.SudokuDataJTO {
  _FakeSudokuDataJTO_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SudokuDataMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSudokuDataMapper extends _i1.Mock implements _i4.SudokuDataMapper {
  MockSudokuDataMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SudokuData fromDTO(_i3.SudokuDataJTO? dto) =>
      (super.noSuchMethod(
            Invocation.method(#fromDTO, [dto]),
            returnValue: _FakeSudokuData_0(
              this,
              Invocation.method(#fromDTO, [dto]),
            ),
          )
          as _i2.SudokuData);

  @override
  _i3.SudokuDataJTO toDTO(_i2.SudokuData? model) =>
      (super.noSuchMethod(
            Invocation.method(#toDTO, [model]),
            returnValue: _FakeSudokuDataJTO_1(
              this,
              Invocation.method(#toDTO, [model]),
            ),
          )
          as _i3.SudokuDataJTO);
}

/// A class which mocks [GameService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameService extends _i1.Mock implements _i5.GameService {
  MockGameService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SudokuDataJTO generate(int? emptySquares) =>
      (super.noSuchMethod(
            Invocation.method(#generate, [emptySquares]),
            returnValue: _FakeSudokuDataJTO_1(
              this,
              Invocation.method(#generate, [emptySquares]),
            ),
          )
          as _i3.SudokuDataJTO);

  @override
  void checkMove() => super.noSuchMethod(
    Invocation.method(#checkMove, []),
    returnValueForMissingStub: null,
  );

  @override
  void checkGame() => super.noSuchMethod(
    Invocation.method(#checkGame, []),
    returnValueForMissingStub: null,
  );
}
