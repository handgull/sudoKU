// Mocks generated by Mockito 5.4.4 from annotations
// in sudoku/test/repositories/mappers/sudoku_data_mapper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:sudoku/models/sudoku_cell/sudoku_cell.dart' as _i2;
import 'package:sudoku/repositories/mappers/sudoku_cell_mapper.dart' as _i4;
import 'package:sudoku/services/network/jto/sudoku_cell/sudoku_cell_jto.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSudokuCell_0 extends _i1.SmartFake implements _i2.SudokuCell {
  _FakeSudokuCell_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSudokuCellJTO_1 extends _i1.SmartFake implements _i3.SudokuCellJTO {
  _FakeSudokuCellJTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SudokuCellMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSudokuCellMapper extends _i1.Mock implements _i4.SudokuCellMapper {
  MockSudokuCellMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SudokuCell fromDTO(_i3.SudokuCellJTO? dto) => (super.noSuchMethod(
        Invocation.method(
          #fromDTO,
          [dto],
        ),
        returnValue: _FakeSudokuCell_0(
          this,
          Invocation.method(
            #fromDTO,
            [dto],
          ),
        ),
      ) as _i2.SudokuCell);

  @override
  _i3.SudokuCellJTO toDTO(_i2.SudokuCell? model) => (super.noSuchMethod(
        Invocation.method(
          #toDTO,
          [model],
        ),
        returnValue: _FakeSudokuCellJTO_1(
          this,
          Invocation.method(
            #toDTO,
            [model],
          ),
        ),
      ) as _i3.SudokuCellJTO);
}
